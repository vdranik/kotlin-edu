package kotl

/*
В ООП все отталкивается от обьекта.
В функциональном программировании - от функций.

Можем передавать функции в качестве параметров другим функциям,
можем указывать возвращаемое значение как функцию,
обьявлять функции в теле других функций и.т.д.

Лямбда выражение - анонимный метод
тело лямбда-выражения - это обычный метод, где может быть сколько угодно вычислений, переменных и прочее, но последняя строчка всегда возвр. значение без слова return
*/

fun main() {
    // функции можно присваивать переменным
    val sum: (Int, Int) -> Int =
        { a: Int, b: Int -> a + b } // внутри фигурных скобок создается функция, котор. принимает 2 параметра, без имени - т.е. анонимная, лямбда выражение
    println(sum(2, 10))

    //val square: (Int) -> Int = { a-> a*a } // если параметр один и мы знаем его тип, можно не указывать параметр а, и в место этого использовать it
    //если функция не имеет параметров, их можно не указывать - val func: () -> Until
    val square: (Int) -> Int = { it * it } // везде где возможно используйте it
    println(square(10))

    val printNum: (Int) -> Unit = { print(it) } // Unit - аналог  void
    printNum(5)

    val perimeter: (Int, Int) -> Int = { a, b -> (a + b) * 2 }
    println(perimeter(4, 5))

    val sayHello: (String) -> Unit = { println("Hello $it!") }
    sayHello("Vova")

    val sort: (Array<Int>) -> Array<Int> = { it.sortedArray() }
    println(sort(arrayOf(0, 3, 30, 31, 56, 2, 7)))


}